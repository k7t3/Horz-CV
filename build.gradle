plugins {
    id 'java'
    id 'java-library'
    // https://gwt-gradle.docstr.org/latest/Configuration
    id "org.docstr.gwt" version "2.1.6"
}


group = 'io.github.k7t3'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

sourceSets {
    main {
        java {
            srcDirs += 'build/generated/sources/annotationProcessor/java/main'
        }
    }
}

dependencies {
    implementation 'org.dominokit:domino-ui:2.0.4'
    implementation 'org.dominokit:domino-mvp:2.0.0-RC2'
    implementation 'org.dominokit:domino-mvp-gwt-view:2.0.0-RC2'

    annotationProcessor 'org.dominokit:domino-mvp-apt-client:2.0.0-RC2'
    compileOnly 'org.dominokit:domino-mvp-apt-client:2.0.0-RC2'

    annotationProcessor 'org.dominokit:domino-mvp-api-client:2.0.0-RC2'
    compileOnly 'org.dominokit:domino-mvp-api-client:2.0.0-RC2'

    // GWTがJUnit5をサポートしていないためJUnit4を使用する
    testImplementation 'junit:junit:4.13.2'

    testImplementation 'org.mockito:mockito-core:5.17.0'
}

gwt {
    gwtVersion = '2.12.2'
    modules = [ 'io.github.k7t3.horzcv.HorzCV' ]

    // DominoKitはトランスパイル時のメモリ使用量が大きい
    maxHeapSize = '1024M'

    sourceLevel = '17'

    // Optional: Compiles faster by reusing data from the previous compile. (defaults to OFF)
    incremental = false

    // The final JS App
    war = layout.buildDirectory.dir('gwt/js')
    // Server side GWT data, e.g. symbol maps, sourcemaps
    deploy = layout.buildDirectory.dir('gwt/deploy')
    // Source files generated by GWT compiler
    gen = layout.buildDirectory.dir('gwt/gen')
    // Compile report as information for the GWT developer
    extra = layout.buildDirectory.dir('gwt/extra')

    generateJsInteropExports = true

    // Optional: Script output style: DETAILED, OBFUSCATED or PRETTY (defaults to OBFUSCATED)
    //style = 'OBFUSCATED'
    style = 'DETAILED'

    // Optional: Configures the GWT compiler
    compiler {
        //
        // All options in 'gwt' closure (except 'gwtVersion') can be overridden here
        //

        // Optional: Sets the optimization level used by the compiler (0=none, 9=maximum)
        //optimize = 9
        optimize = 0

        // Optional: Compile a report that tells the "Story of Your Compile" (defaults to OFF)
        compileReport = true

        draftCompile = true

        //compiler.style = 'OBFUSCATED'
    }


    // Optional: Configures the GWT development mode
    devMode {
        //
        // All options in 'gwt' closure (except 'gwtVersion') can be overridden here
        //

        bindAddress = 'localhost'
        codeServerPort = 9876

        startServer = true
        port = 8080

        // grettyで起動するサーバーのURL
        startupUrl = 'http://localhost:8080/'

        //devMode.style = 'OBFUSCATED'

        devMode.generateJsInteropExports = true
    }

    // Optional: Configures the GWT test runner
    gwtTest {

        // Optional: To specify which test tasks should have GWT test enabled, default to empty list, which is interpreted to mean all tasks of type {@link org.gradle.api.tasks.testing.Test Test}
        testTasks = [ 'test' ]

        gwtTest.sourceLevel = '17'

    }

}

// Additional configurations each holding a single zip file with
// the corresponding GWT compiler output.
configurations {
    gwtJsZipFile
    gwtDeployZipFile
}

// Zip task to package GWT JS output
tasks.register("zipGwtJs", Zip) {
    dependsOn("gwtCompile")
    from (gwt.war)
    destinationDirectory = layout.buildDirectory.dir('gwt')
    archiveBaseName = "${project.name}-js"
}

// Zip task to package GWT deploy output
tasks.register("zipGwtDeploy", Zip) {
    dependsOn("gwtCompile")
    from (gwt.deploy)
    destinationDirectory = layout.buildDirectory.dir('gwt')
    archiveBaseName = "${project.name}-deploy"
}

// Add each zip file as artifact to its corresponding configuration.
// These can then be consumed by other projects.
artifacts {
    gwtJsZipFile tasks.named("zipGwtJs")
    gwtDeployZipFile tasks.named("zipGwtDeploy")
}

// コンパイル後にアプリケーションに必要な静的ファイルをコピーする処理をフック
tasks.named('gwtCompile') {
    doLast {
        copy {
            from 'src/main/webapp'
            into layout.buildDirectory.dir('gwt/js')
        }
    }
}

tasks.register('gwtCompileForDeploy') {
    dependsOn gwtCompile

    doLast {
        // 開発モードのファイルを削除
        def devFile = gwt.war.get().dir('horzcv').file('horzcv.devmode.js').asFile
        if (devFile.exists()) {
            devFile.delete()
        }

        // サーブレットコンテナ向けのファイルを削除
        gwt.war.get().file('context.xml').asFile.delete()
        def webInf = gwt.war.dir('WEB-INF').get()
        webInf.file('web.xml').asFile.delete()
        webInf.asFile.delete()
    }
}

tasks.register('runDevEnv') {
    dependsOn gwtCompile
    dependsOn gwtDevMode
}