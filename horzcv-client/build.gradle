plugins {
    // https://gwt-gradle.docstr.org/latest/Configuration
    id "org.docstr.gwt" version "$gwtGradleVersion"
}


group = 'io.github.k7t3'
version = '1.0-SNAPSHOT'

configurations {
    // 共通ライブラリのソース用構成
    sharedSource
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(clientJavaVersion)
    }
}

sourceSets {
    // domino-mvpフレームワークの生成ソース、共通ライブラリの抽出ソースを追加
    // これらはGWTのトランスパイラーに識別させる必要があるため
    main {
        java {
            srcDirs += 'build/generated/sources/annotationProcessor/java/main'
            srcDirs += 'build/extracted'
        }
    }
}

dependencies {
    // 共通モジュール
    implementation project(path: ':horzcv-shared')
    // 共通モジュールのソース(GWTのJSトランスパイラで使用)
    sharedSource project(path: ':horzcv-shared', configuration: 'sources')

    // DominoKitのライブラリ domino-ui
    implementation "org.dominokit:domino-ui:$dominoUIVersion"

    // DominoKitのライブラリ domino-mvp
    implementation "org.dominokit:domino-mvp:$dominoFrameworkVersion"
    implementation "org.dominokit:domino-mvp-gwt-view:$dominoFrameworkVersion"
    // domino-mvpのアノテーションプロセッサ
    annotationProcessor "org.dominokit:domino-mvp-apt-client:$dominoFrameworkVersion"
    annotationProcessor "org.dominokit:domino-mvp-api-client:$dominoFrameworkVersion"

    // GWTがJUnit5をサポートしていないためJUnit4を使用する
    testImplementation 'junit:junit:4.13.2'

    testImplementation 'org.mockito:mockito-core:5.17.0'
}

// 共通モジュールのソースJarを解凍するタスク
tasks.register('unzipSharedSource', Copy) {
    dependsOn ':horzcv-shared:sourcesJar'
    from zipTree(configurations.sharedSource.singleFile)
    into layout.buildDirectory.dir('extracted')
}

tasks.named('compileJava') {
    dependsOn 'unzipSharedSource'
}

gwt {
    //gwtVersion = ext.gwtVersion
    modules = [ 'io.github.k7t3.horzcv.HorzCV' ]

    // DominoKitはトランスパイル時のメモリ使用量が大きい
    maxHeapSize = '1024M'

    sourceLevel = "$clientJavaVersion"

    // Optional: Compiles faster by reusing data from the previous compile. (defaults to OFF)
    incremental = false

    // The final JS App
    war = layout.buildDirectory.dir('gwt/js')
    // Server side GWT data, e.g. symbol maps, sourcemaps
    deploy = layout.buildDirectory.dir('gwt/deploy')
    // Source files generated by GWT compiler
    gen = layout.buildDirectory.dir('gwt/gen')
    // Compile report as information for the GWT developer
    extra = layout.buildDirectory.dir('gwt/extra')

    generateJsInteropExports = true

    // Optional: Script output style: DETAILED, OBFUSCATED or PRETTY (defaults to OBFUSCATED)
    //style = 'OBFUSCATED'
    style = 'DETAILED'

    // Optional: Configures the GWT compiler
    compiler {
        // Optional: Sets the optimization level used by the compiler (0=none, 9=maximum)
        //optimize = 9
        optimize = 0

        // Optional: Compile a report that tells the "Story of Your Compile" (defaults to OFF)
        compileReport = true

        draftCompile = true
    }

    superDev {
        // サーバーモジュールのアプリケーションディレクトリを対象にする
        launcherDir = project(':horzcv-server').layout.buildDirectory.dir('tomcat/webapps/ROOT')
    }

    // Optional: Configures the GWT test runner
    gwtTest {
        // Optional: To specify which test tasks should have GWT test enabled, default to empty list, which is interpreted to mean all tasks of type {@link org.gradle.api.tasks.testing.Test Test}
        testTasks = [ 'test' ]

        gwtTest.sourceLevel = "$clientJavaVersion"
    }

}

// クライアントアプリケーションのリソースを
// サーバーのテスト用Tomcatディレクトリに反映するタスク
tasks.register('gwtClientResources', Sync) {
    from gwtCompile.war
    into project(':horzcv-server').layout.buildDirectory.dir('tomcat/webapps/ROOT')
}

// コンパイル後にアプリケーションに必要な静的ファイルをコピーする処理をフック
tasks.named('gwtCompile') {
    doLast {
        copy {
            from 'src/main/webapp'
            into layout.buildDirectory.dir('gwt/js')
        }
    }
}

tasks.register('gwtCompileForDeploy') {
    group = 'GWT'
    dependsOn gwtCompile

    doLast {
        // 開発モードのファイルを削除
        def devFile = gwt.war.get().dir('horzcv').file('horzcv.devmode.js').asFile
        if (devFile.exists()) {
            devFile.delete()
        }

        // サーブレットコンテナ向けのファイルを削除
        gwt.war.get().file('context.xml').asFile.delete()
        def webInf = gwt.war.dir('WEB-INF').get()
        webInf.file('web.xml').asFile.delete()
        webInf.asFile.delete()
    }
}